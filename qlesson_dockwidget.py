# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QlessonDockWidget
                                 A QGIS plugin
 This plugin help promotes learning of Geographic Information Systems (GIS) and Remote Sensing concepts in a guided semi-interactive manner within the Qgis environment.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-07-07
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Pascal Ogola
        email                : passies95@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
#import configparser

from qgis.PyQt import uic
from qgis.PyQt.QtGui import QPixmap, QDesktopServices, QIcon, QTextDocument, QPalette, QColor
from qgis.PyQt.QtCore import pyqtSignal, Qt, QUrl
from qgis.PyQt.QtWidgets import QDialog, QDockWidget, QMessageBox, QTreeWidgetItem, QFileDialog, QListWidgetItem, QAbstractItemView

from qgis.gui import QgsGui
from qgis.core import QgsSettings, QgsApplication
from qgis.utils import iface, OverrideCursor

# import the lessonregistry.py, aboutpage.py, lesson.py modules from the root and gui folder
from .lessonregistry import QLessonRegistry
from .gui.aboutpage import get_metadata as aboutpagemetadata
from .lesson import LessonStep
from .lesson_finisheddialog import LessonFinalizedDialog

# Instatiate the LessonRegistry
lessonsRegistry = QLessonRegistry()

pluginPath = os.path.split(os.path.dirname(__file__))[0]
current_dir = os.path.dirname(__file__)
# Add directory to check for lessons
default_lessons_directory = os.path.normpath(os.path.join(current_dir, 'lessons'))

# Add Color Settings
BASE_COLOR = QgsApplication.palette().brush(QPalette.Active, QPalette.Base)
ACTIVE_COLOR = QColor(134, 176, 81, 255)

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    current_dir, 'qlesson_dockwidget_base.ui'))


class QlessonDockWidget(QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()
    lessonFinished = pyqtSignal()
    GROUP_ITEM = QTreeWidgetItem.UserType
    LESSON_ITEM = QTreeWidgetItem.UserType + 1

    def __init__(self, parent=None):
        """Constructor."""
        super(QlessonDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        self.setupUi(self)

        QgsGui.instance().enableAutoGeometryRestore(self)
        # Set lesson progress icons
        self.iconEmpty = QIcon()
        self.iconCurrent = QgsApplication.getThemeIcon('/mTaskRunning.svg')

        # Load the Settings Page first
        self.set_settings_page()

        # Load the library page to the widget and the buttons within it
        self.set_library_page()

        self.set_lesson_page()

        # Load the about page to the widget
        
        self.set_about_page()

    # Define the contents of the library page
    def set_library_page(self):
        # Add button actions
        self.btnAddLessons.clicked.connect(self.addLessons)
        self.btnRemoveLessons.clicked.connect(self.removeLessons)
        self.btnStartLesson.clicked.connect(self.onStartLessonBtnClicked)

        self.treeLessons.itemExpanded.connect(self.updateIcon)
        self.treeLessons.itemCollapsed.connect(self.updateIcon)
        self.treeLessons.currentItemChanged.connect(self.updateInformation)

        self.iconExpanded = QgsApplication.getThemeIcon('/mIconFolderOpen.svg')
        self.iconCollapsed = QgsApplication.getThemeIcon('/mIconFolder.svg')
        self.iconLesson = QIcon(os.path.join(pluginPath, 'icons', 'lesson.svg'))

        myLessonPaths = self.addLessonPathToList()
        #Load the lesson by running the loadlessons method from the lesson registry
        lessonsRegistry.loadLessons(myLessonPaths)

        self.populateTree()
        # Focus the qtwContentsTabs widget to the index 0
        self.qtwContentsTabs.setCurrentIndex(0)
        
    def addLessons(self):
        settings = QgsSettings()
        lastDirectory = settings.value('qlesson/lastLessonDirectory', os.path.expanduser('~'), str)
        fileName, _ = QFileDialog.getOpenFileName(self,
                                                  self.tr('Select file'),
                                                  lastDirectory,
                                                  self.tr('ZIP archives (*.zip *.ZIP)')
                                                 )
        if fileName:
            with OverrideCursor(Qt.WaitCursor):
                settings.setValue('qlesson/lastLessonDirectory', os.path.dirname(fileName))
                lessonsRegistry.installLessonsFromZip(fileName)
                self.populateTree()

    def removeLessons(self):
        with OverrideCursor(Qt.WaitCursor):
            lessonId = self.treeLessons.currentItem().data(0, Qt.UserRole)
            lessonsRegistry.uninstallLesson(lessonId)
            self.populateTree()

    def onStartLessonBtnClicked(self):
        # Retrieve the current lesson
        currentlesson = lessonsRegistry.lessonById(self.treeLessons.currentItem().data(0, Qt.UserRole))
        # Enable the LessonTab and Switch to it
        self.lessonTab.setEnabled(True)
        self.qtwContentsTabs.setCurrentIndex(1)
        # Disable the libraryTab so that the user may not select another lesson 
        # until current lesson is finalized
        self.startCurrentLesson(currentlesson)
        self.libraryTab.setEnabled(False)

    # Set up the lesson page widgets
    def set_lesson_page(self):
        self.btnNextStep.clicked.connect(self.onNextStepBtnClicked)
        self.btnExecuteStep.clicked.connect(self.onExecuteStepBtnClicked)
        self.btnRestartLesson.clicked.connect(self.onRestartLessonBtnClicked)
        #self.btnQuitLesson.clicked.connect(self.onQuitLessonBtnClicked)

    def startCurrentLesson(self, lesson):
        self.lesson = lesson
        self.currentStep = 0
        self.running = True

        self.lstSteps.clear()
        self._restoreNextButton()

        self.lblLessonName.setText('<b>{}</b>'.format(lesson.displayName))

        # Add a Header Text to indicate the Steps that will be Executed
        step_hint = 'We shall undertake the Steps Below:'
        self.lblLessonStepsInstructions.setText('<b>{}</b>'.format(step_hint))

        for index, step in enumerate(lesson.steps):
            number = index + 1
            item_text = f"{number} . {step.name}"
            item = QListWidgetItem(item_text)
            item.setTextAlignment(Qt.AlignLeft | Qt.AlignVCenter)
            self.lstSteps.addItem(item)

        self._stepUp()

    # #----------------------------------------------------------------------------------------------
    # LessonTab buttons
    def onNextStepBtnClicked(self):
        step = self.lesson.steps[self.currentStep]
        # execute check function if any
        if step.check is not None:
            passed = step.runFunction(LessonStep.FunctionType.Check)
            if not passed:
                msg = self.tr('Looks like you have not completed a step. Please '
                              'recheck all instructions and try again.')
                QMessageBox.warning(self, self.tr('QLesson'), msg)
                return

        # disconnect signals if any
        if step.signal is not None:
            step.signal.disconnect(self.signalEmmited)

        self.lstSteps.item(self.currentStep).setIcon(self.iconEmpty)
        self.lstSteps.item(self.currentStep).setBackground(BASE_COLOR)
        self.currentStep += 1
        self._stepUp()

    def onExecuteStepBtnClicked(self):
        step = self.lesson.steps[self.currentStep]
        self.setEnabled(False)
        with OverrideCursor(Qt.WaitCursor):
            step.runFunction(LessonStep.FunctionType.Execute)

        self.setEnabled(True)
        self.onNextStepBtnClicked()

    def onRestartLessonBtnClicked(self):
        self.lstSteps.item(self.currentStep).setIcon(self.iconEmpty)
        self.lstSteps.item(self.currentStep).setBackground(BASE_COLOR)
        self._restoreNextButton()

        self.currentStep = 0
        self._stepUp()

    # def onQuitLessonBtnClicked(self):
    #     if self.running:
    #         self.lessonTab.setEnabled(False)
    #         self.qtwContentsTabs.setCurrentIndex(0)
    #         # Disable the libraryTab so that the user may not select another lesson 
    #         # until current lesson is finalized
    #         self.libraryTab.setEnabled(True)
    #         reply = QMessageBox.question(None,
    #                                      self.tr('Lesson is not completed!'),
    #                                      self.tr('Current lesson is not completed. '
    #                                              'Do you want to finish it and return '
    #                                              'to the QTutor library?'))
    #         if reply == QMessageBox.Yes:
    #             self.running = False
    #             self.lessonFinished.emit()

    def _stepUp(self):
        # this was the last step, lesson finished
        if self.currentStep == len(self.lesson.steps):
            dlg = LessonFinalizedDialog(iface.mainWindow())
            dlg.setRecommendedLesson(self.lesson.recommended)
            result = dlg.exec_()
            if result:
                self.startLesson(dlg.lesson)
            else:
                self.running = False
                self.lessonFinished.emit()
        else:
            # last but one step, change "Next" button title
            if self.currentStep == len(self.lesson.steps) - 1:
                self.btnNextStep.setText(self.tr('Finish'))

            # mark step as current and sroll list so it is visible
            item = self.lstSteps.item(self.currentStep)
            item.setIcon(self.iconCurrent)
            item.setBackground(ACTIVE_COLOR)
            self.lstSteps.scrollToItem(item, QAbstractItemView.PositionAtTop)

            step = self.lesson.steps[self.currentStep]

            # connect signals if any
            if step.signal is not None:
                step.signal.connect(self.signalEmmited)

            # load step description
            if os.path.exists(step.description):
                url = QUrl.fromUserInput(step.description)
                self.txtDescription.document().setMetaInformation(QTextDocument.DocumentUrl,
                                                                  os.path.dirname(url.toString()))
                self.txtDescription.setSource(url)
            else:
                self.txtDescription.setHtml(step.description)

            if step.prepare is not None:
                with OverrideCursor(Qt.WaitCursor):
                    step.runFunction(LessonStep.FunctionType.Prepare)

            if step.execute is not None:
                if step.type == LessonStep.StepType.Automated:
                    self.onExecuteStepBtnClicked()
                else:
                    # FIXME: button state depending of existence of signals
                    self.btnExecuteStep.setEnabled(True)
            else:
                self.btnExecuteStep.setEnabled(False)

    def signalEmmited(self, *args):
        step = self.lesson.steps[self.currentStep]
        if step.handler(*args):
            self.onNextStepBtnClicked()

    def _restoreNextButton(self):
        self.btnNextStep.setText(self.tr('Next'))
    # ----------------------------------------------------------------------------------------------------


    # Define the about page data
    def set_about_page(self):
        # Retrieve the variable from the aboutpagemetdata method
        name, about, description, version, author, homepage, bugs, icon = aboutpagemetadata()

        self.pluginNamelbl.setText('<h2>{}</h2>'.format(name))
        self.lblPluginVersion.setText(self.tr('{}'.format(version)))
        # Set the Icon path
        iconpath = os.path.join(current_dir, 'icons', icon)
        self.pluginLogo.setPixmap(QPixmap(iconpath))
        self.aboutText.setHtml(self.tr(
            '<p><strong>About</strong></p>'
            '<p>{about}</p>'
            '<p><strong>Description</strong></p>'
            '<p>{description}</p>'
            '<p><strong>Developers</strong>: {developer}</p>'
            '<p><strong>Homepage</strong>: <a href="{homepage}">{homepage}</a></p>'
            '<p>Please report bugs at <a href="{bugtracker}">bugtracker</a>.</p>'.format(about=about,
                                                                                         description=description,
                                                                                         developer=author,
                                                                                         homepage=homepage,
                                                                                         bugtracker=bugs)))

    def populateTree(self):
        self.treeLessons.clear()

        for groupId, groupName in lessonsRegistry.groups.items():
            groupItem = QTreeWidgetItem(self.treeLessons, self.GROUP_ITEM)
            groupItem.setText(0, groupName)
            groupItem.setData(0, Qt.DecorationRole, self.iconCollapsed)
            groupItem.setData(0, Qt.UserRole, groupId)
            for lessonId, lesson in lessonsRegistry.lessons[groupId].items():
                lessonItem = QTreeWidgetItem(groupItem, self.LESSON_ITEM)
                lessonItem.setText(0, lesson.displayName)
                lessonItem.setData(0, Qt.DecorationRole, self.iconLesson)
                lessonItem.setData(0, Qt.UserRole, lessonId)

            self.treeLessons.addTopLevelItem(groupItem)
            
    def updateIcon(self, item):
        if item.isExpanded():
            item.setData(0, Qt.DecorationRole, self.iconExpanded)
        else:
            item.setData(0, Qt.DecorationRole, self.iconCollapsed)

    def updateInformation(self, current, previous):
        if current is None or current.type() == self.GROUP_ITEM:
            self.lessontxtInfo.clear()
            self.btnStartLesson.setEnabled(False)
        else:
            lesson = lessonsRegistry.lessonById(current.data(0, Qt.UserRole))
            if lesson:
                if os.path.exists(lesson.description):
                    url = QUrl.fromUserInput(lesson.description)
                    self.lessontxtInfo.document().setMetaInformation(QTextDocument.DocumentUrl,
                                                               os.path.dirname(url.toString()))
                    self.lessontxtInfo.setSource(url)
                else:
                    self.lessontxtInfo.setHtml(lesson.description)

                self.btnStartLesson.setEnabled(True)
    
    def set_settings_page(self):
        self.btnAddLessonPath.setIcon(QgsApplication.getThemeIcon('symbologyAdd.svg'))
        self.btnRemoveLessonPath.setIcon(QgsApplication.getThemeIcon('symbologyRemove.svg'))

        self.btnAddLessonPath.clicked.connect(self.onaddLessonPathClicked)
        self.btnRemoveLessonPath.clicked.connect(self.onremoveLessonPathClicked)

        # Add directory to check for lessons
        default_lesson_path = QListWidgetItem(self.lstLessonPaths)
        default_lesson_path.setText(default_lessons_directory)
        self.lstLessonPaths.addItem(default_lesson_path)
        self.lstLessonPaths.setCurrentItem(default_lesson_path)
        # Add the lesson to the lesson paths
        self.addLessonPathToList()

    def onaddLessonPathClicked(self):
        directory = QFileDialog.getExistingDirectory(self,
                                                     self.tr('Choose a Directory'),
                                                     os.path.normpath(os.path.expanduser('~')),
                                                     QFileDialog.ShowDirsOnly
                                                    )

        if directory:
            #TODO
            # Code to check if the directory is already on path
            item = QListWidgetItem(self.lstLessonPaths)
            item.setText(directory)
            item.setFlags(Qt.ItemIsEditable | Qt.ItemIsEnabled | Qt.ItemIsSelectable)
            self.lstLessonPaths.addItem(item)
            self.lstLessonPaths.setCurrentItem(item)
            self.addLessonPathToList()

    def onremoveLessonPathClicked(self):
        currentRow = self.lstLessonPaths.currentRow()
        item = self.lstLessonPaths.takeItem(currentRow)
        item
        del item
    
    def addLessonPathToList(self):
        # Instatiate the Lessonpathlist to store all the paths to lessons
        lessonPathsList = list()
        for i in range(self.lstLessonPaths.count()):
            lessonPathsList.append(self.lstLessonPaths.item(i).text())
        return lessonPathsList
    
    def removeLessonPathFromList(self):
        # remove the 
        # TODO
        pass
    

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    
